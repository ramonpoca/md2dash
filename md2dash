#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Convert markdonw to Dash cheat sheet"""

import codecs
import os, re, sqlite3
import argparse
import mistune
from mistune import Renderer
from pygments import highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import html

HEADER_TYPES=['VOID','Annotation', 'Attribute', 'Binding', 'Builtin', 'Callback', 'Category', 'Class', 'Command', 'Component', 'Constant', 'Constructor', 'Define', 'Delegate', 'Diagram', 'Directive', 'Element', 'Entry', 'Enum', 'Environment', 'Error', 'Event', 'Exception', 'Extension', 'Field', 'File', 'Filter', 'Framework', 'Function', 'Global', 'Guide', 'Hook', 'Instance', 'Instruction', 'Interface', 'Keyword', 'Library', 'Literal', 'Macro', 'Method', 'Mixin', 'Modifier', 'Module', 'Namespace', 'Notation', 'Object', 'Operator', 'Option', 'Package', 'Parameter', 'Plugin', 'Procedure', 'Property', 'Protocol', 'Provider', 'Provisioner', 'Query', 'Record', 'Resource', 'Sample', 'Section', 'Service', 'Setting', 'Shortcut', 'Statement', 'Struct', 'Style', 'Subroutine', 'Tag', 'Test', 'Trait', 'Type', 'Union', 'Value', 'Variable', 'Word']

DEFAULT_HEADER_TYPES=['VOID','Section','Section','VOID','VOID','VOID','VOID']


parser = argparse.ArgumentParser(description='Convert markdown to a dash cheat sheet.')
parser.add_argument('inputfile', type=argparse.FileType(), help='Markdown input file')
parser.add_argument('-l', '--level-type', nargs=2, action='append', metavar=('HEADER_LEVEL', 'HEADER_TYPE'), help="Set a Dash header type for the given markdown level (1-6)\nBy default only levels 1 and 2 are set as Category.\nAvailable types are:\n%s" % (', '.join(HEADER_TYPES)) )
parser.add_argument('-t', '--title', metavar=('TITLE'), help="Set a title for the docset. If not set, the markdown file name will be used.")
args = parser.parse_args()


if args.level_type and len(args.level_type) > 0:
    for level, name in args.level_type:
        l = 0
        try:
            l = int(level)
            if l < 1 or l > 6:
                parser.error("Error: %d should be between 1 and 6" % l)
        except ValueError:        
            parser.error("Error: %s should be an integer between 1 and 6" % level)
        if not name in HEADER_TYPES:
            parser.error("Error: %s should be one of %s" % (name, ', '.join(HEADER_TYPES)))
        DEFAULT_HEADER_TYPES[l] = name


FILE=args.inputfile.name
if args.title:
    DOCSETNAME=args.title
else:
    DOCSETNAME=FILE.split('.')[0]

print( "Parsing %s into %s.docset" % (FILE, DOCSETNAME))

print( "Creating paths...")
os.makedirs("%s.docset/Contents/Resources/Documents" % DOCSETNAME)

print( "Creating plist...")
PLIST='''
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleIdentifier</key>
	<string>cheatsheet</string>
	<key>CFBundleName</key>
	<string>%s</string>
	<key>DashDocSetFamily</key>
	<string>cheatsheet</string>
	<key>DashDocSetKeyword</key>
	<string>%s</string>
	<key>DashDocSetPluginKeyword</key>
	<string>%s</string>
	<key>DocSetPlatformFamily</key>
	<string>cheatsheet</string>
	<key>dashIndexFilePath</key>
	<string>index.html</string>
	<key>isDashDocset</key>
	<true/>
</dict>
</plist>
''' % (DOCSETNAME, DOCSETNAME.lower(), DOCSETNAME.lower())

with open("%s.docset/Contents/Info.plist" % DOCSETNAME, 'w') as f:
    f.write(PLIST)

print( "Creating docSet.dsidx database...")

conn = sqlite3.connect('%s.docset/Contents/Resources/docSet.dsidx' % DOCSETNAME)
cur = conn.cursor()

try: cur.execute('DROP TABLE searchIndex;')
except: pass
cur.execute('CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);')
cur.execute('CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path);')

docpath = '%s.docset/Contents/Resources/Documents' % DOCSETNAME


class DashRenderer(Renderer):
    def block_code(self, code, lang):
        if not lang:
            return '\n<pre><code>%s</code></pre>\n' % \
                mistune.escape(code)
        lexer = get_lexer_by_name(lang, stripall=True)
        formatter = html.HtmlFormatter()
        return highlight(code, lexer, formatter)
    def reset_toc(self):
        self.toc_tree = []
        self.toc_count = 0

    def header(self, text, level, raw=None):
        rv = '<h%d id="toc-%d">%s</h%d>\n' % (
            level, self.toc_count, text, level
        )
        self.toc_tree.append((self.toc_count, text, level, raw))
        self.toc_count += 1
        return rv

    def render_toc(self, cursor):
        """Render TOC to SQLITE index.

        :param cursor: sqlite cursor for the inserts
        :param level: render toc to the given level
        """

        for toc in self.toc_tree:
            index, text, l, raw = toc
            path = "index.html#toc-%d" % index
            htype = DEFAULT_HEADER_TYPES[l]
            if htype != 'VOID':
                cursor.execute('INSERT INTO searchIndex(name, type, path) VALUES (?,?,?)', (text, htype, path))



toc=DashRenderer()
markdown = mistune.Markdown(renderer = toc)
toc.reset_toc()
text = markdown.parse(args.inputfile.read())
toc.render_toc(cur)
conn.commit()

scaffold = '''
<HTML>
<HEAD>
<TITLE>%s</TITLE>
<STYLE>
%s
</STYLE>
</HEAD>
<BODY>%s</BODY>
</HTML>    
''' % (DOCSETNAME, html.HtmlFormatter().get_style_defs('.highlight'), text)




with codecs.open(docpath + "/index.html",'w', 'utf-8') as f:
    f.write(scaffold)

    

